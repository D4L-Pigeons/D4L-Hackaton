chain:
- name: "encoder"
  chain_link_spec_path: "dense_blocks/dense_block_stack"
  cfg:
    input_dim: 784
    output_dim: 48
    hidden_dims: [512, 100]
    ordered_module_specs:
    - {nnmodule_spec_path: "activation/relu", kwargs: {}}
    block_wrapper_name: null

- name: "posterior"
  chain_link_spec_path: "latent/posterior_gaussian"
  cfg:
    std_transform: "softplus"
    loss_coef_posterior_entropy: .001

- name: "condition_embedding"
  chain_link_spec_path: "condition_embedding/condition_set_embedding_transformer"
  cfg:
    embedding_dim: 128
    transformer: {encoder_kwargs: {num_layers: 2}, encoder_layer_kwargs: {nhead: 4, dim_feedforward: 256}}
    embedding_module: {n_conditions: 5, n_categories_per_condition: [10, 3, 5, 3, 5]}

- name: "condition-to-logits"
  chain_link_spec_path: "dense_blocks/dense_block_stack"
  cfg:
    input_dim: 128
    output_dim: 100
    hidden_dims: [80]
    ordered_module_specs: []
    block_wrapper_name: null

- name: "conditioned_prior"
  chain_link_spec_path: "latent/prior_vec_conditioned_logits_gaussian_mixture_nll"
  cfg:
    n_components: 100
    latent_dim: 24
    components_std: 1.
    loss_coef_prior_nll: .001

- name: "decoder"
  chain_link_spec_path: "dense_blocks/dense_block_stack"
  cfg:
    input_dim: 24
    output_dim: 784
    hidden_dims: [100, 512]
    ordered_module_specs:
    - {nnmodule_spec_path: "activation/relu", kwargs: {}}
    block_wrapper_name: null

- name: "reconstr_loss"
  chain_link_spec_path: "loss/reconstruction"
  cfg:
    coef: 1.
    loss_fn: {name: "mse", kwargs: {reduction: "none"}}
    tensor_reductor: {name: "mean", kwargs: {}}

- name: "output-activation"
  chain_link_spec_path: "dense_blocks/standalone_tiny_module"
  cfg:
    nnmodule_spec_path: "activation/sigmoid"
    output_dim: null
    kwargs: {}

- name: "clone-duplicate"
  chain_link_spec_path: "misc/cloner"
  cfg: {}

- name: "adapter"
  chain_link_spec_path: "misc/adapter"
  cfg:
    aggregation_type: "concat"
    kwargs: {dim: -1}

- name: "rearrange"
  chain_link_spec_path: "misc/rearranger"
  cfg: {}

- name: "repeat"
  chain_link_spec_path: "misc/repeater"
  cfg: {}

training:
  batch_size: 512
  max_epochs: 100
  check_val_every_n_epoch: 1

optimizers:
- optimizer_name: "adam"
  kwargs: {lr: 0.001}
  links: ["encoder", "decoder", "condition-to-logits", "conditioned_prior"]
  lr_scheduler: null
- optimizer_name: "adam"
  kwargs: {lr: 0.01}
  links: ["condition_embedding"]
  lr_scheduler: null

loss_manager:
  reductions:
  - {reduce_pattern: "b s -> b", reductor_name: "logsumexp", pre_scale: null, post_scale: null, kwargs: {}}
  - {reduce_pattern: "b ->", reductor_name: "mean", pre_scale: null, post_scale: null, kwargs: {}}
  loss_coef_schedulers:
  - link_name: "posterior"
    loss_name: "postr_neg_entr"
    schedulers_cfg:
    - {name: 'linear', kwargs: {start_coef_scale: .001, end_coef_scale: 1., num_epochs: 50}}
  - link_name: "conditioned_prior"
    loss_name: "prior_nll"
    schedulers_cfg:
    - {name: 'linear', kwargs: {start_coef_scale: .001, end_coef_scale: 1., num_epochs: 50}}
  - link_name: "reconstr_loss"
    loss_name: "reconstr"
    schedulers_cfg:
    - {name: 'linear', kwargs: {start_coef_scale: 1., end_coef_scale: .1, num_epochs: 100},}

commands:
- command_name: "forward"
  processing_steps:
  - {link: 'clone-duplicate', method: 'forward', kwargs: {data_name: "img", clone_name: "img_org", clone: true}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "b 1 h w -> b (h w)"}}
  - {link: 'encoder', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'posterior', method: 'forward', kwargs: {data_name: "img", n_latent_samples: 16}}
  - {link: 'condition_embedding', method: 'forward', kwargs: {cond_ids_name: 'condition_token_ids', cat_ids_name: 'condition_values', cond_embed_name: 'cond_embed'}}
  - {link: 'condition-to-logits', method: 'forward', kwargs: {data_name: "cond_embed"}}
  - {link: 'conditioned_prior', method: 'forward', kwargs: {data_name: "img", logits_name: "cond_embed"}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "b s d -> (b s) d"}}
  - {link: 'decoder', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'output-activation', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "(b s) (h w) -> b s 1 h w", s: 16, h: 28, w: 28}}
  - {link: 'repeat', method: 'forward', kwargs: {data_name: "img_org", pattern: "b 1 h w -> b s 1 h w", s: 16}}
  - {link: 'reconstr_loss', method: 'forward', kwargs: {data_name: "img", target_name: "img_org", reduce_pattern: "b s 1 h w -> b s"},}

- command_name: "encode"
  processing_steps:
  - {link: 'clone-duplicate', method: 'forward', kwargs: {data_name: "img", clone_name: "img_org"}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "b 1 h w -> b (h w)"}}
  - {link: 'encoder', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'posterior', method: 'forward', kwargs: {data_name: "img", n_latent_samples: 1}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "b 1 d -> b d"},}

- command_name: "encode-decode"
  processing_steps:
  - {link: 'clone-duplicate', method: 'forward', kwargs: {data_name: "img", clone_name: "img_org", clone: true}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "b 1 h w -> b (h w)"}}
  - {link: 'encoder', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'posterior', method: 'forward', kwargs: {data_name: "img", n_latent_samples: 1}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "b 1 d -> b d"}}
  - {link: 'condition_embedding', method: 'forward', kwargs: {cond_ids_name: 'condition_token_ids', cat_ids_name: 'condition_values', cond_embed_name: 'cond_embed'}}
  - {link: 'condition-to-logits', method: 'forward', kwargs: {data_name: "cond_embed"}}
  - {link: 'decoder', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'output-activation', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "b (h w) -> b 1 h w", h: 28, w: 28},}

- command_name: "sample-prior"
  processing_steps:
  - {link: 'condition_embedding', method: 'forward', kwargs: {cond_ids_name: 'condition_token_ids', cat_ids_name: 'condition_values', cond_embed_name: 'cond_embed'}}
  - {link: 'condition-to-logits', method: 'forward', kwargs: {data_name: "cond_embed"}}
  - {link: 'conditioned_prior', method: 'sample', kwargs: {n_latent_samples: 16, data_name: "img", logits_name: "cond_embed"}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "b s d -> (b s) d"}}
  - {link: 'decoder', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'output-activation', method: 'forward', kwargs: {data_name: "img"}}
  - {link: 'rearrange', method: 'forward', kwargs: {data_name: "img", pattern: "(b s) (h w) -> b s 1 h w", s: 16, h: 28, w: 28},}

- command_name: "get_means"
  processing_steps:
  - {link: 'conditioned_prior', method: 'get_means', kwargs: {gm_means_name: "gm_means"}}
